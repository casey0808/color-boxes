{"version":3,"sources":["Choice.js","Box.js","BoxContainer.js","App.js","serviceWorker.js","index.js"],"names":["choice","arr","Math","floor","random","length","Box","props","state","boxcolor","colors","handleChange","bind","changeColor","this","setState","st","idx","indexOf","newArray","concat","splice","e","className","style","backgroundColor","onClick","Component","BoxContainer","Array","num","fill","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uUAAA,SAASA,EAAOC,GAEZ,OAAOA,EADGC,KAAKC,MAAMD,KAAKE,SAAWH,EAAII,S,UCqC9BC,E,YAhCX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,CACTC,SAAUT,EAAO,EAAKO,MAAMG,SAEhC,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBANL,E,2EASJ,IAAD,OACTE,KAAKC,UAAS,SAACC,GACP,IAAIC,EAAM,EAAKV,MAAMG,OAAOQ,QAAQF,EAAGP,UACnCU,EAAW,GAAGC,OAAO,EAAKb,MAAMG,QAGpC,OAFAS,EAASE,OAAOJ,EAAK,GAEd,CACHR,SAFWT,EAAOmB,S,mCAMrBG,GACTR,KAAKD,gB,+BAIL,OACI,yBAAKU,UAAU,MAAMC,MAAO,CAACC,gBAAiBX,KAAKN,MAAMC,UAAWiB,QAASZ,KAAKH,mB,GA3B5EgB,aCDZC,G,uLAUE,OACI,yBAAKL,UAAU,SACVM,MAAMf,KAAKP,MAAMuB,KAAKC,KAAK,kBAAC,EAAD,CAAKrB,OAAQI,KAAKP,MAAMG,e,GAZzCiB,cAArBC,EACKI,aAAe,CAClBF,IAAK,GACLpB,OAAQ,CACJ,MAAO,SAAU,SAAU,QAAS,OAAQ,OAAQ,SAAU,QAC9D,OAAQ,YAAa,QAAS,OAAQ,aAAc,OAAQ,OAAQ,SAAU,QAC9E,WAYGkB,QCVAK,MARf,WACE,OACE,yBAAKV,UAAU,OACb,kBAAC,EAAD,QCKcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a18beea8.chunk.js","sourcesContent":["function choice(arr){\n    let idx = Math.floor(Math.random() * arr.length);\n    return arr[idx];\n}\n\nexport { choice };\n","import React, { Component } from 'react';\nimport { choice } from './Choice';\nimport './Box.css';\n\n\nclass Box extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            boxcolor: choice(this.props.colors)  // state is immutable, so this statement only execute once.\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.changeColor = this.changeColor.bind(this);\n    }\n\n    changeColor(){\n        this.setState((st) => {\n                let idx = this.props.colors.indexOf(st.boxcolor);\n                var newArray = [].concat(this.props.colors);\n                newArray.splice(idx, 1);\n                let newColor = choice(newArray);\n                return {\n                    boxcolor: newColor\n                }\n        })\n    } \n    handleChange(e){\n        this.changeColor();\n    }\n\n    render(){\n        return(\n            <div className=\"box\" style={{backgroundColor: this.state.boxcolor}} onClick={this.handleChange}>\n            </div>\n        )\n    }\n}\n\nexport default Box;","import React, { Component } from 'react';\nimport Box from './Box';\nimport './BoxContainer.css';\n\nclass BoxContainer extends Component {\n    static defaultProps = {\n        num: 16,\n        colors: [\n            'red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'purple', 'black',\n            'pink', 'lightblue', 'brown', 'grey', 'whitesmoke', 'teal', 'navy', 'silver', 'olive',\n            'maroon'\n        ]\n    }\n    render(){\n        return(\n            <div className='boxes'>\n                {Array(this.props.num).fill(<Box colors={this.props.colors} />)}\n            </div>\n        )\n    }\n}\n\nexport default BoxContainer;","import React from 'react';\nimport './App.css';\nimport BoxContainer from './BoxContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BoxContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}